/* eslint-disable max-len */
const config = {
  token: '',

  // Twitter
  twitterAPIKey: '',
  twitterAPISecret: '',
  twitterAccessToken: '',
  twitterAccessTokenSecret: '',
  followedTwitterUsers: [],

  // Webhooks
  twitterHookID: '',
  twitterHookToken: '',

  // Raid Settings
  raidJoinsPerSecond: 10,
  raidJoinCount: 10,

  // Settings
  prefix: '.',
  verifiedRole: 'Islander',
  modRole: 'Nooklings (mod)',
  adminRole: 'Tom Nook (admin)',
  staffChat: 'channelID',
  modMail: 'channelID',
  reportMail: 'channelID',
  actionLog: 'channelID',
  joinLeaveLog: 'channelID',
  modLog: 'channelID',
  musicText: 'channelID',
  music: 'channelID',
  sesReqText: 'channelID',
  sesCategory: 'channelID',
  calendar: 'channelID',

  // Image-Only channels
  imageOnlyChannels: ['channelID'],

  // Reputation Settings
  negativeRepLimit: 20,
  positiveRepLimit: 20,

  // UserDB
  userDBDefaults: {
    friendcode: '',
    island: {
      islandName: '',
      fruit: '',
      characterName: '',
      hemisphere: '',
      profileName: '',
    },
    positiveRep: 0,
    negativeRep: 0,
    posRepList: [],
    negRepList: [],
    roles: [],
    nicknames: [],
    usernames: [],
    infractions: [],
    unmuteTime: 0,
  },

  // Bot Perms and Stuff
  ownerID: 'userID',

  admins: ['userID', 'userID'],

  ignoreMember: ['userID'],

  ignoreChannel: ['channelID'],

  support: ['userID', 'userID'],

  // Guild Perms and Stuff
  permLevels: [
    {
      level: 0,
      name: 'User',
      check: () => true,
    },
    {
      level: 1,
      name: 'Verified',
      check: (client, message) => {
        if (message.guild) {
          const verifiedRole = message.guild.roles.cache.find((r) => r.name.toLowerCase() === client.getSettings(message.guild).verifiedRole.toLowerCase());

          if (verifiedRole && message.member.roles.cache.has(verifiedRole.id)) {
            return true;
          }
        }
        return false;
      },
    },
    {
      level: 2,
      name: 'Mod',
      check: (client, message) => {
        if (message.guild) {
          const modRole = message.guild.roles.cache.find((r) => r.name.toLowerCase() === client.getSettings(message.guild).modRole.toLowerCase());

          if (modRole && message.member.roles.cache.has(modRole.id)) {
            return true;
          }
        }
        return false;
      },
    },
    {
      level: 3,
      name: 'Admin',
      check: (client, message) => {
        if (message.guild) {
          const adminRole = message.guild.roles.cache.find((r) => r.name.toLowerCase() === client.getSettings(message.guild).adminRole.toLowerCase());

          if ((adminRole && message.member.roles.cache.has(adminRole.id)) || message.member.hasPermission('ADMINISTRATOR')) {
            return true;
          }
        }
        return false;
      },
    },
    {
      level: 4,
      name: 'Server Owner',
      check: (client, message) => {
        if (message.guild && message.author.id === message.guild.ownerID) {
          return true;
        }
        return false;
      },
    },
    {
      level: 8,
      name: 'Bot Support',
      check: (client, message) => config.support.includes(message.author.id),
    },
    {
      level: 9,
      name: 'Bot Admin',
      check: (client, message) => config.admins.includes(message.author.id),
    },
    {
      level: 10,
      name: 'Bot Owner',
      check: (client, message) => config.ownerID === message.author.id,
    },
  ],
};

module.exports = config;
